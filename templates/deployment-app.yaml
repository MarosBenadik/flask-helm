apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flaskapp-chart.fullname" . }}
  labels:
    {{- include "flaskapp-chart.labels" . | nindent 4 }}
  {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      {{- include "flaskapp-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "flaskapp-chart.selectorLabels" . | nindent 8 }}
      {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "5000"
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "flaskapp-chart.fullname" . }}-service-account-{{ .Values.color }}
      {{- end }}
      initContainers:
        - name: vault-init
          image: vault:1.13.3  # Use the Vault image
          command: ['sh', '-c']
          args:
            - |
              export VAULT_ADDR='http://vault.vault.svc.cluster.local:8200'
              export VAULT_TOKEN=$(cat /mnt/vault-token/token)
              ls -al /mnt
              ls -al /mnt/vault-secrets
              vault kv get -format=json secret/flask/mysql > /mnt/mysql
              jq -r '.data | to_entries | map("\(.key)=\(.value)") | .[]' /mnt/mysql > /mnt/vault-secrets/mysql-creds.env
              vault kv get -format=json secret/flask/rabbitmq > /mnt/rabbitmq
              jq -r '.data | to_entries | map("\(.key)=\(.value)") | .[]' /mnt/rabbitmq > /mnt/vault-secrets/rabbitmq-creds.env
          volumeMounts:
            - name: vault-secrets
              mountPath: /mnt
            - name: vault-token
              mountPath: /mnt/vault-token
        - name: db-init
          image: mysql:{{ .Values.db.version }}  # Use MySQL image to have the mysql client available
          command: ['sh', '-c']
          args:
            - |
              set -a
              source /mnt/vault-secrets/mysql-creds.env
              until mysql -h {{ .Values.db.name }}-service-{{ .Values.color }} -P 3306 -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1"; do
                echo "Waiting for database..."
                sleep 2
              done
          env:
            - name: MYSQL_HOST
              value: "{{ .Values.db.name }}-service-{{ .Values.color }}"
            - name: MYSQL_PORT
              value: "3306"
          volumeMounts:
            - name: vault-secrets
              mountPath: /mnt
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 15
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 5
            timeoutSeconds: 2
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MYSQL_HOST
              value: "{{ .Values.db.name }}-service-{{ .Values.color }}"
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "{{ .Values.db.dbname }}"
            - name: FLASK_VERSION
              value: {{ .Values.app.version }}
          {{- range $env := .Values.env }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
          {{- end }}
          command: ['sh', '-c']
          args:
            - |
              set -a
              source /mnt/vault-secrets/mysql-creds.env
              source /mnt/vault-secrets/rabbitmq-creds.env
              python app.py
          resources:
            limits:
              cpu: 100m
              memory: 150Mi
            requests:
              cpu: 100m
              memory: 150Mi
          volumeMounts:
            - name: vault-secrets
              mountPath: /mnt
      imagePullSecrets:
        - name: my-dockerhub-secret
      volumes:
        - name: vault-secrets
          emptyDir: {}
        - name: vault-token
          secret:
            secretName: vault-token
