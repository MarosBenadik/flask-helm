apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flaskapp-chart.fullname" . }}
  labels:
    {{- include "flaskapp-chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "flaskapp-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "flaskapp-chart.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: db-init
          image: mysql:{{ .Values.db.version }}  # Use MySQL image to have the mysql client available
          command: ['sh', '-c', 'until mysql -h {{ .Values.db.name }}-service-{{ .Values.color }} -P 3306 -u {{ .Values.db.user }} -proot -e "SELECT 1"; do echo "Waiting for database..."; sleep 2; done']
          # This command attempts to connect to the MySQL server and runs a simple query to check if it's up.
          env:
            - name: MYSQL_HOST
              value: "{{ .Values.db.name }}-service-{{ .Values.color }}"
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_USER
              value: "{{ .Values.db.user }}"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.name }}-secret-{{ .Values.color }} # Kubernetes Secret for MySQL credentials
                  key: mysql-root-password
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 15
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 5
            timeoutSeconds: 2
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            # MySQL environment variables
            - name: MYSQL_HOST
              value: "{{ .Values.db.name }}-service-{{ .Values.color }}" # Name of your MySQL service in Kubernetes
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "{{ .Values.db.dbname }}" # Your MySQL database name
            - name: MYSQL_USER
              value: "{{ .Values.db.user }}" # Your MySQL user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.name }}-secret-{{ .Values.color }} # Kubernetes Secret for MySQL credentials
                  key: mysql-root-password
            - name: FLASK_VERSION
              value: {{ .Values.app.version }}
          {{- range $env := .Values.env }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      imagePullSecrets:
      - name: my-dockerhub-secret  # Reference the secret here
